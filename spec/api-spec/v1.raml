#%RAML 0.8
#vim syntax:yaml
title: Prédiction
version: v1
baseUri: http://api.predictio.info/{version}
schemas:
  - errorReport: |
      {
        "$schema": "http://json-schema.org/schema",
        "type": "object",
        "title": "Rapport d'erreur",
        "properties": {
          "code": {
            "type": "string",
            "required": true
          },
          "details": {
            "type": "array",
            "required": false
          }
        }
      }
  - user: |
      {
        "$schema": "http://json-schema.org/schema",
        "type": "object",
        "title": "Détails d'un utilisateur",
        "properties": {
          "id": {
            "type": "string",
            "required": true
          },
          "nickname": {
            "type": "string",
            "required": true
          },
          "social": {
            "type": "array",
            "required": false,
            "items": {
              "type": "object",
              "properties": {
                "provider": {
                  "type": "string",
                  "title": "Nom du réseau social lié au compte de l'utilisateur"
                },
                "avatar_url": {
                  "type": "string",
                  "title": "Avatar lié à l'association"
                },
                "id": {
                  "type": "string",
                  "title": "Identifiant de l'utilisateur pour le provider donné"
                }
              }
            }
          },
          "statistics": {
            "type": "object",
            "required": true,
            "properties": {
              "cristals": {
                "type": "integer",
                "required": true
              },
              "predictions": {
                "type": "integer",
                "required": true
              },
              "questions": {
                "type": "integer",
                "required": true
              },
              "friends": {
                "type": "integer",
                "required": true
              }
            }
          },
          "token": {
            "type": "string",
            "title": "Le token à envoyer dans les requêtes à l'API",
            "required": false
          },
          "token_expiration": {
            "type": "timestamp",
            "title": "Le timestamp indiquant la fin de validité du token",
            "required": false
          },
          "firstname": {
            "type": "string",
            "required": false
          },
          "lastname": {
            "type": "string",
            "required": false
          },
          "email": {
            "type": "string",
            "required": false
          },
          "country": {
            "type": "string",
            "required": false
          },
          "config": {
            "type": "object",
            "title": "La configuration de l'application",
            "required": false
          }
        }
      }
  - users: |
      {
        "type": "array",
        "items": {
          "type": "object",
          "title": "Utilisateur",
          "properties": {
            "id": {
              "type": "string",
              "required": true
            },
            "nickname": {
              "type": "string",
              "required": true
            },
            "country": {
              "type": "string",
              "required": false
            }
          }
        }
      }
  - ladder: |
      {
        "$schema": "http://json-schema.org/schema",
        "type": "array",
        "title": "Classement",
        "items": {
          "type": "object",
          "title": "Entrée du classement",
          "properties": {
            "id": {
              "type": "string",
              "required": true
            },
            "nickname": {
              "type": "string",
              "required": true
            },
            "score": {
              "type": "integer",
              "required": true
            },
            "social": {
              "type": "array",
              "required": true,
              "items": {
                "type": "object",
                "properties": {
                  "provider": {
                    "type": "string",
                    "title": "Nom du réseau social lié au compte de l'utilisateur"
                  },
                  "avatar_url": {
                    "type": "string",
                    "title": "Avatar lié à l'association"
                  },
                  "id": {
                    "type": "string",
                    "title": "Identifiant de l'utilisateur pour le provider donné"
                  }
                }
              }
            }
          }
        }
      }
  - questions: |
      {
        "$schema": "http://json-schema.org/schema",
        "type": "array",
        "title": "Liste des questions",
        "items": {
          "type": "object",
          "title": "Question",
          "properties": {
            "id": {
              "type": "string",
              "required": true
            },
            "author": {
              "type": "object",
              "required": false,
              "properties": {
                "id": {
                  "type": "string",
                  "required": true 
                },
                "nickname": {
                  "type": "string",
                  "required": true 
                }
              }
            },
            "expires_at": {
              "type": "datetime",
              "required": true
            },
            "label": {
              "type": "string",
              "title": "Label de la question dans la locale demandée",
              "required": true
            },
            "dev_info": {
              "type": "string",
              "required": false
            },
            "winnings": {
              "type": "integer",
              "title": "Le nombre de cristaux gagnés ou a gagner",
              "required": false
            },
            "statistics": {
              "type": "object",
              "required": true,
              "properties": {
                "cristals": {
                  "type": "integer",
                  "title": "Nombre de cristaux mis en jeu",
                  "required": false
                },
                "participations": {
                  "type": "integer",
                  "title": "Nombre d'utilisateurs ayant déjà fait une prédiction pour la question",
                  "required": true
                },
                "friends": {
                  "type": "array",
                  "title": "Utilisateurs dans les amis ayant déjà répondu",
                  "required": true,
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "required": true
                      },
                      "prediction_id": {
                        "type": "integer",
                        "title": "L'id de la prédiction réalisée par l'ami",
                        "required": true
                      },
                      "provider": {
                        "type": "string",
                        "required": true
                      },
                      "social_id": {
                        "type": "string",
                        "required": true
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
  - question: |
      {
        "$schema": "http://json-schema.org/schema",
        "type": "object",
        "title": "Détails d'une question",
        "properties": {
          "questionId": {
            "type": "string",
            "required": true
          },
          "kind": {
            "type": "string",
            "title": "Type de la question (publique ou privée)",
            "required": true
          },
          "expiration": {
            "type": "datetime",
            "required": true
          },
          "label": {
            "type": "string",
            "required": true
          },
          "madePrediction": {
            "type": "boolean",
            "title": "L'utilisateur courant a-t-il prédit quelque chose",
            "required": true
          },
          "author": {
            "type": "object",
            "required": true,
            "properties": {
              "id": {
                "type": "string",
                "required": true 
              },
              "nickname": {
                "type": "string",
                "required": true 
              }
            }
          },
          "prediction": {
            "type": "object",
            "title": "Une référence vers la prédiction faite par l'utilisateur",
            "required": false,
            "properties": {
              "predictionId": {
                "type": "string",
                "required": true
              }
            }
          },
          "statistics": {
            "type": "array",
            "required": true,
            "items": {
              "type": "object",
              "properties": {
                "cristals": {
                  "type": "integer",
                  "title": "Nombre de cristaux mis en jeu",
                  "required": false
                },
                "participations": {
                  "type": "integer",
                  "title": "Nombre d'utilisateurs ayant déjà fait une prédiction pour la question",
                  "required": true
                },
                "friends": {
                  "type": "array",
                  "title": "Utilisateurs dans les amis ayant déjà répondu",
                  "required": true,
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "required": true
                      },
                      "provider": {
                        "type": "string",
                        "required": true
                      },
                      "social_id": {
                        "type": "string",
                        "required": true
                      }
                    }
                  }
                }
              }
            }
          },

          "predictions": {
            "type": "array",
            "title": "Les prédictions ayant déjà été faites",
            "required": true,
            "items": {
              "type": "object",
              "title": "Détails d'une prédiction",
              "properties": {
                "id": {
                  "type": "integer",
                  "required": false
                },
                "cksum": {
                  "type": "string",
                  "title": "Somme de controle de la prédiction (id-composant):(réponse)",
                  "required": true
                },
                "mine": {
                  "type": "boolean",
                  "title": "Présent à vrai si l'utilisateur à fait cette prédiction",
                  "required": false
                },
                "statistics": {
                  "type": "object",
                  "required": true,
                  "properties": {
                    "cristals": {
                      "type": "integer",
                      "title": "Le nombre de cristaux misés sur cette prédiction",
                      "required": true
                    },
                    "players": {
                      "type": "integer",
                      "title": "Le nombre de joueurs ayant fait cette prédiction",
                      "required": true
                    },
                    "winnings": {
                      "type": "float",
                      "title": "Le nombre de cristaux à gagner pour 1 cristal misé",
                      "required": true
                    }
                  }
                }
              }
            }
          },
          "components": {
            "type": "array",
            "title": "Liste des composants de la question",
            "required": false,
            "items": {
              "type": "object",
              "title": "Composant de la question",
              "properties": {
                "id": {
                  "type": "integer",
                  "required": true
                },
                "label": {
                  "type": "string",
                  "required": true
                },
                "dev_info": {
                  "type": "string",
                  "required": false
                },
                "kind": {
                  "type": "string",
                  "required": true
                },
                "choices": {
                  "type": "array",
                  "title": "Possibilités de réponse pour un composant à choix",
                  "required": false,
                  "items": {
                    "type": "object",
                    "title": "Choix",
                    "properties": {
                      "label": {
                        "type": "string",
                        "required": "true"
                      },
                      "position": {
                        "type": "integer",
                        "required": true
                      },
                      "dev_info": {
                        "type": "string",
                        "required": "true"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
  - newQuestion: |
      {
        "$schema": "http://json-schema.org/schema",
        "type": "object",
        "title": "Nouvelle question",
        "properties": {
          "label": {
            "type": "string",
            "required": true
          },
          "components": {
            "type": "array",
            "required": true,
            "items": {
              "type": "object",
              "title": "Composants de la nouvelle question",
              "properties": {
                "label": {
                  "type": "string",
                  "required": true
                },
                "componentType": {
                  "type": "string",
                  "required": true
                },
                "choices": {
                  "type": "array",
                  "title": "Proposition pour un composant à choix",
                  "required": false,
                  "items": {
                    "type": "object",
                    "title": "Choix",
                    "properties": {
                      "label": {
                        "type": "string",
                        "required": "true"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
  - newPrediction: |
      {
        "$schema": "http://json-schema.org/schema",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "require": true
          },
          "stakes": {
            "type": "integer",
            "title": "Le nombre de cristaux misés",
            "require": true
          },
          "components": {
            "type": "array",
            "title": "Liste des composants d'une nouvelle prédiction",
            "items": {
              "type": "object",
              "title": "Réponse à un composant",
              "properties": {
                "id": {
                  "type": "string",
                  "require": true
                },
                "value": {
                  "type": "float",
                  "require": true
                }
              }
            }
          }
        }
      }
  - activities: |
      {
        "$schema": "http://json-schema.org/schema",
        "type": "array",
        "title": "Liste d'évènements",
        "items": {
          "type": "object"
          "properties": {
            "kind": {
              "type": "string",
              "required": true
            },
            "created_at": {
              "type": "timestamp",
              "required": true
            },
            "identifier": {
              "type": "string",
              "title": "L'identifiant du badge",
              "required": false
            },
            "level": {
              "type": "integer",
              "title": "Le niveau du badge",
              "required": false
            },
            "question": {
              "type": "object",
              "title": "Le détail de la question auquel l'évènement se rapporte (voir le schema question)",
              "required": false,
            },
            "winnings": {
              "type": "integer",
              "title": "Les gains de la participation",
              "required": false
            },
            "player": {
              "type": "object",
              "required": true,
              "properties": {
                "id": {
                  "type": "string",
                  "required": true
                },
                "nickname": {
                  "type": "string",
                  "required": true
                },
                "social": {
                  "type": "array",
                  "required": false,
                  "items": {
                    "type": "object",
                    "properties": {
                      "provider": {
                        "type": "string",
                        "title": "Nom du réseau social lié au compte de l'utilisateur"
                      },
                      "avatar_url": {
                        "type": "string",
                        "title": "Avatar lié à l'association"
                      },
                      "id": {
                        "type": "string",
                        "title": "Identifiant de l'utilisateur pour le provider donné"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
  - badges: |
      {
        "$schema": "http://json-schema.org/schema",
        "type": "array",
        "title": "Liste de badges",
        "items": {
          "type": "object"
          "properties": {
            "identifier": {
              "type": "string",
              "required": true
            },
            "level": {
              "type": "integer",
              "required": true
            }
          }
        }
      }

resourceTypes:
  - collection:
      usage: Liste d'éléments.
      description: Une liste d'éléments de type <<elementName>>.
      get:
        description: Retourne les <<elementName>>
        responses:
          200:
            description: Les éléments demandés sont disponibles dans le corps de la réponse.
            body:
              application/json:
                schema: <<resourcePathName>>
  - member:
      usage: Détails d'un élément.
      description: Accède à un membre de type <<elementName>>.
      get:
        responses:
          200:
            description: L'élément demandé est accessible dans le corps de la réponse.
            body:
              application/json:
                schema: <<resourcePathName | !singularize >>
  - user:
      description: Un utilisateur.
      get:
        responses:
          200:
            body:
              application/json:
                schema: user
traits:
  - authenticable:
      usage: Appliquer sur les méthodes qui permettent de s'identifier.
      description: Permet d'ouvrir un nouveau compte ou d'utiliser un compte existant.
      body:
        application/x-www-form-urlencoded:
          formParameters:
            email:
              description: Email à inscrire
            password:
              description: Mot de passe à associer à l'email
            oauth2Token:
              description: Token d'identification OAuth2
            oauth2Provider:
              description: Provider OAuth2 utilisé
              pattern: facebook|googleplus|twitter
      responses:
        401:
          description: Les identifiants fournis sont invalides.
        200:
          description: |
            L'utilisateur est maintenant identifié.
            
            Il est possible d'utiliser les informations contenue dans cette
            réponse pour utiliser le reste de l'API.
          body:
            application/json:
              schema: user
              example: |
                {
                  "token":"e92e040be1e896c6b38b2128051367f0",
                  "token_expiration":1390931057,
                  "nickname":"nicoolas25",
                  "first_name":"John",
                  "last_name":"Do",
                  "social":[
                    {
                      "provider":0,
                      "id":"100006962349730"
                    }
                  ],
                  "config":{
                    "stake":{
                      "min":10,
                      "max":1000
                    },
                  }
                }
  - secured:
      usage: Appliquer sur chaque méthode qui nécessite d'être identifié
      description: Certaines requêtes nécessites d'être identifié
      headers:
        Authentication-Token:
      responses:
        401:
          description: L'identité de l'utilisateur n'a pas pu être établie.
  - exigent:
      responses:
        403:
          description: |
            Des données incomplètes ou malformés ont été soumises.
            
            Des détails peuvent être dans le corps de la réponse.
          body:
            application/json:
              schema: errorReport
/registrations:
  post:
    is: [ exigent ]
    description: |
      L'appel à cette URL créé un nouvel utilisateur.
      
      L'utilisateur peut utiliser soit un couple email / password soit un réseau
      social de son choix. Par la suite il pourra associer à son compte d'autres
      réseaux sociaux.
      
      Lors de le création de compte le choix d'un pseudonyme unique est obligatoire.
    body:
      application/x-www-form-urlencoded:
        formParameters:
          nickname:
            description: Pseudonyme du nouveau joueur
            required: true
          oauth2Token:
            description: Token d'identification OAuth2
            required: true
          oauth2Provider:
            description: Provider OAuth2 utilisé
            pattern: facebook|googleplus|twitter
            required: true
    responses:
      201:
        description: Le joueur a été créé.
        body:
          application/json:
            schema: user
      403:
        description: |
          Code retourné lorsque les données d'entrée ne permettent pas de créer
          un utilisateur.
          
          Dans le corps de la réponse figurent plus de détails sur l'origine
          de ce conflit. Ça peut être un email déjà utilisé ou bien un compte de
          réseau social déjà lié ou encore un pseudo déjà utilisé.

          Voici les codes d'erreurs à prendre en compte :

          * `nickname_taken`
          * `social_account_taken`
          * `bad_parameters`
          * `invalid_oauth2_provider`
          * `invalid_oauth2_token`
  patch:
    is: [ secured ]
    description: Permet d'ajouter un nouveau réseau social à son compte.
    body:
      application/x-www-form-urlencoded:
        formParameters:
          oauth2Token:
          oauth2Provider:
    responses:
      200:
/sessions:
  post:
    is: [ authenticable ]
    description: |
      Permet de s'identifier auprès de l'API.
      
      L'utilisateur peut utiliser soit son couple email / password soit un des
      réseaux sociaux liés à son compte.
    responses:
      403:
        description: |
          Voici les codes d'erreurs à prendre en compte :

          * `bad_parameters`
          * `social_account_unknown`
          * `invalid_oauth2_provider`
          * `invalid_oauth2_token`
/users:
  /{who}:
    is: [ secured, exigent ]
    type: user
    uriParameters:
      who:
        description: Selectionne l'utilisateur
        type: string
        pattern: me|userId
    get:
      description: |
        Retourne les informations de l'utilisateur identifié par le paramètre who.
      
        En fonction de la relation entre l'utilisateur identifié et l'utilisateur
        selectionné, les informations retournées ne seront pas les mêmes.
    /friends:
      is: [ secured ]
      type: { collection: { elementName: "Amis" } }
/ladders:
  /{scope}:
    is: [ secured ]
    type: { member: { elementName: "Classement" } }
    uriParameters:
      scope:
        description: Filtre le classement pour n'afficher que les amis.
        type: string
        pattern: friends|global
    /{tag}:
      is: [ secured ]
      type: { member: { elementName: "Classement" } }
      uriParameters:
        tag:
          description: Filtre le classement pour ne prendre en compte qu'un tag.
          type: string
/questions:
  is: [ secured ]
  post:
    is: [ exigent ]
    description: |
      Créé une nouvelle question.
      
      Dans un premier temps seuls les administrateurs ne seront autorisés à créer
      des questions.
    body:
      application/json:
        schema: newQuestion
  /{locale}:
    uriParameters:
      locale:
        description: La langue dans laquelle les textes de la questions doivent être retournés
        type: string
        pattern: fr|en
    /{questionId}:
      is: [ secured ]
      type: { member: { elementName: "Question" } }
      uriParameters:
        questionId:
          description: L'identifiant d'une question en particulier.
          type: string
    /{scope}/{status}:
      is: [ secured ]
      type: { collection: { elementName: "Questions" } }
      uriParameters:
        scope:
          description: Filtre les questions pour n'afficher que les amis.
          type: string
          pattern: friends|global|userId
        status:
          description: Filtre les questions pour n'afficher que les question dans un certain état.
          type: string
          pattern: outdated|answered|open
      /{tag}:
        is: [ secured ]
        type: { collection: { elementName: "Question" } }
        uriParameters:
          tag:
            description: Filtre les questions pour n'afficher qu'un certain tag.
            type: string
/participations:
  is: [ secured ]
  post:
    is: [ exigent ]
    description: Créé une participation pour une question donnée.
    body:
      application/json:
        schema: newPrediction
    responses:
      200:
        description: |
          La participation a bien été prise en compte.
          
          L'identifiant de la participation est retourné dans le corps de la réponse.
        body:
          application/json:
            example: '{ participationId: "1234567890abcdef" }'
      403:
        body:
          application/json:
            schema: errorReport
  /{questionId}:
    get:
      description: Liste des utilisateurs ayant fait une prédiction sur une question donnée.
      responses:
        200:
          body:
            application/json:
              schema: users
/shares/{locale}/{via}/{kind}/{id}:
  uriParameters:
    locale:
      description: La langue dans laquelle les textes de la questions doivent être retournés
      type: string
      pattern: fr|en
    via:
      description: Le réseau social à utiliser.
      type: string
      pattern: facebook|googleplus|twitter
    kind:
      description: Le type de partage demandé
      type: string
      pattern: participation|application|badge
    id:
      description: L'identifiant de l'élément à partager
      type: string
  post:
    is: [ secured, exigent ]
    body:
      application/x-www-form-urlencoded:
        formParameters:
          oauth2Token:
            description: Token d'identification OAuth2 attaché au même provider (paramètre via)
    responses:
      200:
/activities:
  is: [ secured ]
  /{locale}:
    uriParameters:
      locale:
        description: La langue dans laquelle les textes de la questions doivent être retournés
        type: string
        pattern: fr|en
    get:
      queryParameters:
        before:
          description: S'il est présent, tous les évènements retournés seront avant le timestamp donné
          type: timestamp
        after:
          description: S'il est présent, tous les évènements retournés seront après le timestamp donné
          type: timestamp
      description: Liste des évènements (historique) relatifs à l'utilisateur et à ses amis
      responses:
        200:
          body:
            application/json:
              schema: activities
/badges:
  /{who}:
    is: [ secured, exigent ]
    type: user
    uriParameters:
      who:
        description: Selectionne l'utilisateur
        type: string
        pattern: me|userId
    get:
      description: Liste des badges obtenus par l'utilisateur selectionné
      responses:
        200:
          body:
            application/json:
              schema: badges
